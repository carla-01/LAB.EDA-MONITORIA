# Quest√£o 3 - An√°lise sobre uso de √Årvores em Tabela Hash

## ‚úÖ Vantagens de usar √°rvores (BST/AVL) em vez de listas:

### Melhor Complexidade:
- **Busca**: O(log n) em √°rvores vs O(n) em listas
- **Inser√ß√£o**: O(log n) em √°rvores balanceadas vs O(1) no in√≠cio de listas
- **Remo√ß√£o**: O(log n) em √°rvores vs O(n) em listas

### Balanceamento Autom√°tico:
- √Årvores AVL mant√™m balanceamento, garantindo desempenho √≥timo
- Evita degenera√ß√£o para lista encadeada (que ocorre em BST n√£o balanceada)

### Elementos Ordenados:
- √Årvores mant√™m os elementos naturalmente ordenados
- √ötil para opera√ß√µes que necessitam de ordena√ß√£o

## ‚ùå Desvantagens:

### Complexidade de Implementa√ß√£o:
- √Årvores s√£o mais complexas que listas encadeadas simples
- Requer algoritmos de rota√ß√£o (AVL) ou rebalanceamento

### Overhead de Mem√≥ria:
- Cada n√≥ de √°rvore requer mais ponteiros (left, right, parent, height)
- Consumo maior de mem√≥ria comparedo com listas simples

### Custo Operacional:
- Rota√ß√µes em AVL adicionam overhead nas opera√ß√µes de inser√ß√£o/remo√ß√£o
- Para poucos elementos, o custo pode n√£o justificar o benef√≠cio

## üéØ Cen√°rios Recomendados:

### Quando USAR √°rvores:
- Alta taxa de colis√£o na mesma posi√ß√£o da tabela hash
- Aplica√ß√µes com muitas opera√ß√µes de busca
- QuandoÈúÄË¶Å manter elementos ordenados
- Fator de carga elevado (> 0.7)

### Quando N√ÉO USAR √°rvores:
- Poucas colis√µes esperadas
- Implementa√ß√µes que priorizam simplicidade
- Restri√ß√µes severas de mem√≥ria
- Tabelas hash com bom espalhamento

## üìä Conclus√£o:
A substitui√ß√£o √© **vi√°vel t√©cnicamente** e traz benef√≠cios de desempenho em cen√°rios de alta colis√£o, mas introduz complexidade adicional. Para a maioria dos casos pr√°ticos, **listas encadeadas simples s√£o suficientes** e mais adequadas pela simplicidade de implementa√ß√£o.